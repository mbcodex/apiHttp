package com.powin.stackcommander2;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class StackCommandDriverIntegrationTest {
	private final static Logger LOG = LogManager.getLogger();
	private static StackCommandDriver stackCommandDriver;

	@BeforeAll
	static void setupBeforeClass() throws Exception {
		stackCommandDriver = new StackCommandDriver();
		stackCommandDriver.getReporter().createNewReportFile("StackCommandDriver");
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	void setUp() throws Exception {
	}

	@AfterEach
	void tearDown() throws Exception {
	}

	@Test
	void testMovePowerSunspec() {
		String s = "Power,SET_POWER_SUNSPEC, 50, 0";
		String[] temp = s.split(",");
		Command cmd = Command.fromName(temp[1]);
		cmd.setParameters(Arrays.copyOfRange(temp, 1, temp.length));
		StackCommandDriver.executeScript(Arrays.asList(cmd));
		// TODO Add Validation
	}

	@Test
	void testStopPowerSunspec() {
//		String s = "STOP_POWER_SUNSPEC, 50, 0";
//		String [] temp = s.split(",");
//		Command cmd = Command.fromName(temp[0]);
//		cmd.setParameters(Arrays.copyOfRange(temp, 1,command.getParameters()[1].trim() temp.length));
//		StackCommandDriver.executeScript(Arrays.asList(cmd));
		// TODO Add Validation
	}

	@Test
	void testLoop1() {
		String input = "Utilities,LOOP_START\n" + "Utilities,CONDITION_START\n" + "InfoBits,GETSOC,<,100\n"
				+ "Utilities,OR\n" + "InfoBits,getMaxCellGroupVoltage,>,4000\n" + "Utilities,CONDITION_END\n"
				+ "Utilities,SLEEP,10000\n" + "Power,SET_POWER_POWER_COMMAND,50,0\n" + "Utilities,LOOP_END\n"
				+ "Power,STOP_POWER_POWER_COMMAND\n" + "Utilities,SLEEP,5000\n";
		String[] lines = input.split("\\n");
		List<Command> commands = new ArrayList<>();
//	    Condition condition = new Condition();
		for (String line : lines) {
			String[] temp = line.split(",");
			Command command = Command.fromName(temp[1]);
			command.setParameters(Arrays.copyOfRange(temp, 1, temp.length));
			commands.add(command);
		}
		LOG.info(commands);
		StackCommandDriver.executeScript(commands);

	}

	@Test
	void testForLoop() {
		String input = "Utilities,LOOP_START\n" + "Utilities,CONDITION_START\n" + "Utilities,COUNTER,0,10,2\n"
				+ "Utilities,CONDITION_END\n" + "Utilities,SLEEP,100\n" + "Power,SET_POWER_POWER_COMMAND,50,0\n"
				+ "Utilities,LOOP_END\n" + "Power,STOP_POWER_POWER_COMMAND\n" + "Utilities,SLEEP,100\n";
		String[] lines = input.split("\\n");
		List<Command> commands = new ArrayList<>();
//	    Condition condition = new Condition();
		for (String line : lines) {
			String[] temp = line.split(",");
			Command command = Command.fromName(temp[1]);
			command.setParameters(Arrays.copyOfRange(temp, 1, temp.length));
			commands.add(command);
		}
		LOG.info(commands);
		StackCommandDriver.executeScript(commands);

	}

	@Test
	void testTimer() {
		String input = "Utilities,LOOP_START\n" + "Utilities,CONDITION_START\n" + "Utilities,TIMER,10000,MS\n"
				+ "Utilities,CONDITION_END\n" + "Utilities,SLEEP,1000\n" + "Power,SET_POWER_POWER_COMMAND,50,0\n"
				+ "Utilities,LOOP_END\n" + "Power,STOP_POWER_POWER_COMMAND\n" + "Utilities,SLEEP,1000\n";
		String[] lines = input.split("\\n");
		List<Command> commands = new ArrayList<>();
//	    Condition condition = new Condition();
		for (String line : lines) {
			String[] temp = line.split(",");
			Command command = Command.fromName(temp[1]);
			command.setParameters(Arrays.copyOfRange(temp, 1, temp.length));
			commands.add(command);
		}
		LOG.info(commands);
		StackCommandDriver.executeScript(commands);

	}

	@Test
	void testRestUntilBalanced() {
		stackCommandDriver.restUntilBalanced(60, 25);
	}

}
